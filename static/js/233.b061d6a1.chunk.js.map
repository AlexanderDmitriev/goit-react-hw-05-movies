{"version":3,"file":"static/js/233.b061d6a1.chunk.js","mappings":"wPAGaA,EAAaC,EAAAA,EAAAA,EAAH,yIAGR,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,MAEjC,SAAAF,GAAK,OAAIA,EAAMC,MAAME,OAAOC,aAG1BC,EAAcN,EAAAA,EAAAA,GAAH,yIAGT,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,MAEjC,SAAAF,GAAK,OAAIA,EAAMC,MAAME,OAAOG,cAI1BC,EAAaR,EAAAA,EAAAA,GAAH,kSAEN,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,MACjC,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,MACvB,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,MAI3B,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,M,SCpBrCM,EAAoD,SAACR,GAChE,IAAQS,EAAoBT,EAApBS,OAAQC,EAAYV,EAAZU,QAChB,OACE,UAACH,EAAD,YACE,SAACF,EAAD,UAAcI,KACd,SAACX,EAAD,UAAaY,Q,UCyCnB,EAzCyC,WACvC,OAA4BC,EAAAA,EAAAA,UAAiC,MAA7D,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BF,EAAAA,EAAAA,WAAkB,GAA9C,eAAOG,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAgBR,OAbAE,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAeH,GAASI,MAAK,SAAAC,GACvBA,IACFR,EAAUQ,EAASC,KAAKC,SACa,IAAjCF,EAASC,KAAKC,QAAQC,QACxBT,GAAU,SAMf,CAACC,KAGF,gCACGJ,GACC,wBACGA,EAAOa,KAAI,SAAAC,GAAG,OACb,SAAClB,EAAD,CAEEC,OAAQiB,EAAIjB,OACZC,QAASgB,EAAIhB,SAFRgB,EAAIC,UAOf,SAAC,IAAD,IAEDb,IACC,SAAChB,EAAD,mE,oNChDK8B,EAAY,8BACZC,EAAe,mCCGtBC,EAAO,mCAAG,WAAOC,GAAP,gGAEmCC,IAAAA,IAAUD,GAF7C,cAENV,EAFM,yBAGLA,GAHK,gCAKZY,EAAAA,GAAAA,MAAY,gDALA,yDAAH,sDASAC,EAAa,SAAClB,GACzB,IAAMe,EAAU,UAAMH,EAAN,mBAA0BZ,EAA1B,4BAAqDa,EAArD,0BAChB,OAAOC,EAAQC,IAGJI,EAAkB,SAACnB,GAC9B,IAAMe,EAAU,UAAMH,EAAN,mBAA0BZ,EAA1B,oBAA6Ca,EAA7C,0BAChB,OAAOC,EAAQC,IAGJK,EAAc,WACzB,IAAML,EAAG,UAAMH,EAAN,sCAA6CC,GACtD,OAAOC,EAAQC,IAGJM,EAAY,SAACC,GACxB,IAAMP,EAAU,UAAMH,EAAN,kCAAyCC,EAAzC,kBAA+DS,EAA/D,8CAChB,OAAOR,EAAQC,IAGJQ,EAAU,SAACvB,GACtB,IAAMe,EAAU,UAAMH,EAAN,mBAA0BZ,EAA1B,4BAAqDa,EAArD,mBAChB,OAAOC,EAAQC","sources":["components/Reviews/ReviewsStyled.jsx","components/Reviews/ReviewsItem.tsx","components/Reviews/Reviews.tsx","services/basicData.ts","services/api.ts"],"sourcesContent":["import styled from '@emotion/styled';\n\n//Стилизованный текст отзыва\nexport const ReviewText = styled.p`\n  font-family: Raleway, sans-serif;\n  font-weight: 500;\n  font-size: ${props => props.theme.spacing(3)};\n  line-height: 1.2;\n  color: ${props => props.theme.colors.textColor};\n`;\n\nexport const ReviewTitle = styled.h2`\n  font-family: Raleway, sans-serif;\n  font-weight: 700;\n  font-size: ${props => props.theme.spacing(5)};\n  line-height: 1.2;\n  color: ${props => props.theme.colors.titleColor};\n`;\n\n//Стили блока для отдельного отзыва\nexport const ReviewItem = styled.li`\n  list-style: none;\n  text-indent: ${props => props.theme.spacing(3)};\n  padding: ${props => props.theme.spacing(2)};\n  border-radius: ${props => props.theme.spacing(1)};\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  :not(:last-child) {\n    margin-bottom: ${props => props.theme.spacing(2)};\n  }\n`;\n","import React from 'react';\nimport { ReviewText, ReviewTitle, ReviewItem } from './ReviewsStyled';\n\ninterface IReviewsItem {\n  author: string;\n  content: string;\n}\n\nexport const ReviewsItem:React.FunctionComponent<IReviewsItem> = (props) => {\n  const { author, content } = props;\n  return (\n    <ReviewItem>\n      <ReviewTitle>{author}</ReviewTitle>\n      <ReviewText>{content}</ReviewText>\n    </ReviewItem>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as API from '../../services/api';\nimport { ReviewText } from './ReviewsStyled';\nimport { ReviewsItem } from './ReviewsItem';\nimport { Spinner } from '../AppStyled';\n\ninterface IReviews {\n  id: number;\n  author: string;\n  content: string;\n}\n\nconst Reviews: React.FunctionComponent = () => {\n  const [review, setReview] = useState<Array<IReviews> | null>(null);\n  const [noData, setNoData] = useState<boolean>(false);\n  const { movieId } = useParams<string>();\n\n  //Получаем даннык об актёрах и пока загружаем включаем спиннер\n  useEffect(() => {\n    API.getReviews(movieId).then(response => {\n      if (response) {\n        setReview(response.data.results);\n        if (response.data.results.length === 0) {\n          setNoData(true);\n        }\n      } else {\n        return;\n      }\n    });\n  }, [movieId]);\n\n  return (\n    <>\n      {review ? (\n        <ul>\n          {review.map(rev => (\n            <ReviewsItem\n              key={rev.id}\n              author={rev.author}\n              content={rev.content}\n            />\n          ))}\n        </ul>\n      ) : (\n        <Spinner />\n      )}\n      {noData && (\n        <ReviewText>Sorry, we don't have any reviews for this movie</ReviewText>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","export const BASIC_URL = 'https://api.themoviedb.org/';\nexport const PERSONAL_KEY = '7a732289faaa021b300c67c80c35cad1'; //Ключ API (v3 auth)\n// Ключ доступа к API (v4 auth)\nexport const PERSONAL_KEY_V4 =\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YTczMjI4OWZhYWEwMjFiMzAwYzY3YzgwYzM1Y2FkMSIsInN1YiI6IjYyNmU1NzcyMjQ1ZGJlMzM3ZjQzNzgwOSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.nGXh-5GwT2pl8pJ7su6oK_01uD4EgHcGzKoNAn_Ubao';\n\n/* Пример API-запроса\nhttps://api.themoviedb.org/3/movie/550?api_key=7a732289faaa021b300c67c80c35cad1 */\n\n//Документация\n//Our primary documentation is located at developers.themoviedb.org","import axios, { AxiosResponse } from 'axios';\nimport  toast  from 'react-hot-toast';\nimport { BASIC_URL, PERSONAL_KEY } from './basicData';\n\nconst getData = async (url:string):Promise<any> => {\n  try {\n    const response:AxiosResponse<any, any> = await axios.get(url);\n    return response;\n  } catch (error) {\n    toast.error('Sorry, We don`t have this film`s information');\n  }\n};\n\nexport const getReviews = (movieId:string|undefined):Promise<any> => {\n  const url:string = `${BASIC_URL}3/movie/${movieId}/reviews?api_key=${PERSONAL_KEY}&language=en-US&page=1`;\n  return getData(url);\n};\n\nexport const getMovieDetails = (movieId:string|undefined):Promise<any> => {\n  const url:string = `${BASIC_URL}3/movie/${movieId}?api_key=${PERSONAL_KEY}&language=en-US&page=1`;\n  return getData(url);\n};\n\nexport const getTranding = ():Promise<any> => {\n  const url = `${BASIC_URL}3/trending/all/day?api_key=${PERSONAL_KEY}`;\n  return getData(url);\n};\n\nexport const getMovies = (query:string):Promise<any> => {\n  const url:string = `${BASIC_URL}3/search/movie?api_key=${PERSONAL_KEY}&query=${query}&language=en-US&page=1&include_adult=false`;\n  return getData(url);\n};\n\nexport const getCast = (movieId:string):Promise<any> => {\n  const url:string = `${BASIC_URL}3/movie/${movieId}/credits?api_key=${PERSONAL_KEY}&language=en-US`;\n  return getData(url);\n};\n"],"names":["ReviewText","styled","props","theme","spacing","colors","textColor","ReviewTitle","titleColor","ReviewItem","ReviewsItem","author","content","useState","review","setReview","noData","setNoData","movieId","useParams","useEffect","API","then","response","data","results","length","map","rev","id","BASIC_URL","PERSONAL_KEY","getData","url","axios","toast","getReviews","getMovieDetails","getTranding","getMovies","query","getCast"],"sourceRoot":""}